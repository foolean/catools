#!/bin/bash
#
# Filename:     create_ca
# Author:       Bennett Samowich <bsamowich@foolean.org>
# Date:         2014-04-30
#
# Description:
#   create_ca is part of the CATools suite.  The script itself handles
#   the creation of a CA complete with its directory structure and
#   encrypted container if necessary.
#
# License:
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Puplic License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

# Determine the root of our own directory structure
# Note: this assumes that this script lives in <root>/bin
export CA_TOOLS=$(readlink -f $(dirname $0)/..);

# Initialize some variables
DEBUG=0;                # Debugging flag
VERBOSE=0;              # Verbosity flag
FORCE=0;                # Force recreation of existing files
USE_KEY_FILE=0;         # Whether or not to generate a key file
ENCRYPT=0;              # Whether or not to create an encrypted container
CONTAINER_SIZE=128;     # Default encrypted container size (128MB)
CA_NAME="";             # Placeholder for the CA name
CA_CONF="";             # Placeholder for the CA configuration file
CA_KEY_SIZE=4096;       # Default CA key size
PWLEN=15360;            # Default length of autogenerated passwords
PWROUNDS=1024;          # Default number of rounds for generating passwords

# debug - Helper function to print debugging output
function debug {
    if [ ${DEBUG} -ge 1 ]; then
        echo "debug: $(basename $0): $*"
    fi
}

# error - Helper function to print an error message
function error {
    echo "error: $*"
}

# fatal - Helper function to print an error message and exit
function fatal {
    echo "fatal: $*"
    exit 1
}

# notice - Helper function to print general output
function notice {
    echo "notice: $*"
}

# verbose - Helper function to print verbose output
function verbose {
    if [ ${VERBOSE} -ge 1 ]; then
        echo "$*"
    fi
}

# create_dir - Helper function to create directories
function create_dir {
    if [ ! -d "${1}" ]; then
        verbose "Creating directory ${1}..."
        debug "executing: mkdir -m 0700 \"${1}\""
        mkdir -m 0700 "${1}"
        debug "chown root:root \"${1}\""
        chown root:root "${1}"
    fi
}

# init_empty_file - Helper function to create empty files
function init_empty_file {
    if [ ! -f "${1}" ] || [ ${FORCE} -eq 1 ]; then
        verbose "Initializing ${1}"
        debug "executing: cp /dev/null \"${1}\""
        cp /dev/null    "${1}"
        debug "executing: chmod 0600 \"${1}\""
        chmod 0600      "${1}"
        debug "chown root:root \"${1}\""
        chown root:root "${1}"
    fi
}

# init_index_file - Helper function to initialize a CA index file
function init_index_file {
    if [ ! -f "${1}" ] || [ ${FORCE} -eq 1 ]; then
        verbose "Initializing ${1}"
        debug "executing: echo \"01\" > \"${1}\""
        echo "01"     > "${1}"
        debug "executing: chmod 0600 \"${1}\""
        chmod 0600      "${1}"
        debug "executing: chown root.root \"${1}\""
        chown root.root "${1}"
    fi
}

# usage - Simple usage function
function usage {
    echo "usage: $0 [OPTIONS]"
    echo "  -b [SIZE]   - CA key size in bits (default: ${CA_KEY_SIZE})"
    echo "  -c [FILE]   - OpenSSL configuration file for this CA"
    echo "  -d          - Display debugging output"
    echo "  -e          - Protect this CA in an encrypted container"
    echo "  -f          - Force the recreation of existing files"
    echo "  -h          - Print this message"
    echo "  -k          - Generate a key file for the encrypted container"
    echo "  -l [LEN]    - Length of autogenerated passwords (default: ${PWLEN})"
    echo "  -n [NAME]   - Name of the CA (e.g. root, intermediate, etc.)"
    echo "  -p [NAME]   - Name of the parent CA to this one"
    echo "  -r [ROUNDS] - Number of rounds when generating passwords (default: ${PWROUNDS})"
    echo "  -s [SIZE]   - Size of the encrypted container (default: ${CONTAINER_SIZE})"
    echo "  -v          - Display more verbose output"
    exit 1
}

# Parse the command-line options
while getopts ":b:c:defhkl:n:p:r:s:v" opt; do
    case $opt in
        b)
            CA_KEY_SIZE=$OPTARG
            ;;
        c)
            CA_CONF=$OPTARG
            ;;
        d)
            DEBUG=1
            ;;
        e)
            ENCRYPT=1
            ;;
        f)
            FORCE=1
            ;;
        h)
            usage
            ;;
        k)
            USE_KEY_FILE=1
            ;;
        l)
            PWLEN=$OPTARG
            ;;
        n)
            CA_NAME=$OPTARG
            ;;
        p)
            PARENT=$OPTARG
            ;;
        r)
            PWROUNDS=$OPTARG
            ;;
        s)
            CONTAINER_SIZE=$OPTARG
            ;;
        v)
            VERBOSE=1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument" >&2
            exit 1
            ;;
    esac
done

# Must supply a CA name
if [ "${CA_NAME}" == "" ]; then
    error "Must supply a CA name"
    usage
    exit 1
fi

# Set the many variables that we'll use
CONTAINER_NAME="${CA_NAME}-ca"
CONTAINER="${CA_TOOLS}/enc/${CONTAINER_NAME}.enc"
CONTAINER_KEY="${CONTAINER}.pw"
CA_PATH="${CA_TOOLS}/CA/${CA_NAME}"
CA_DB="${CA_PATH}/db/${CA_NAME}.db"
CA_DB_ATTR="${CA_PATH}/db/${CA_NAME}.db.attr"
CA_CRT_SRL="${CA_PATH}/db/${CA_NAME}.crt.srl"
CA_CRL_SRL="${CA_PATH}/db/${CA_NAME}.crl.srl"
CA_PASSWD_FILE="${CA_PATH}/private/${CA_NAME}.passwd"
CA_KEY="${CA_PATH}/private/${CA_NAME}.key"
CA_CSR="${CA_PATH}/csr/${CA_NAME}.csr"
CA_CERT="${CA_PATH}/certs/${CA_NAME}.crt"
CA_CRL="${CA_TOOLS}/crl/${CA_NAME}.crl"
if [ "${CA_CONF}" == "" ]; then
    CA_CONF="${CA_TOOLS}/etc/${CA_NAME}-ca.conf"
else
    CA_CONF=$(readlink -f "${CA_CONF}")
fi
CA_CERT_PEM="${CA_TOOLS}/certs/${CA_NAME}-ca.pem"
CA_CERT_DER="${CA_TOOLS}/certs/${CA_NAME}-ca.der"
CA_CHAIN="${CA_TOOLS}/certs/${CA_NAME}-ca-chain.pem"
PARENT_CA_PASSWD_FILE=""
PARENT_CA_CONF=""
PARENT_CA_CHAIN=""
if [ "${PARENT}" != "" ]; then
    PARENT_CA_PASSWD_FILE="${CA_TOOLS}/CA/${PARENT}/private/${PARENT}.passwd"
    PARENT_CA_CONF="${CA_TOOLS}/etc/${PARENT}-ca.conf"
    PARENT_CA_CHAIN="${CA_TOOLS}/certs/${PARENT}-ca-chain.pem"
    if [ ! -f "${PARENT_CA_CHAIN}" ]; then
        PARENT_CA_CHAIN="${CA_TOOLS}/certs/${PARENT}-ca.pem"
    fi
fi

# Display debugging output
debug "General Flags:"
debug "DEBUG                      = '${DEBUG}'"
debug "VERBOSE                    = '${VERBOSE}'"
debug "FORCE                      = '${FORCE}'"
debug ""
debug "Container:"
debug "ENCRYPT                    = '${ENCRYPT}'"
debug "USE_KEY_FILE               = '${USE_KEY_FILE}'"
debug "CONTAINER_SIZE             = '${CONTAINER_SIZE}'"
debug "CONTAINER                  = '${CONTAINER}'"
debug "CONTAINER_NAME             = '${CONTAINER_NAME}'"
debug "CONTAINER_KEY              = '${CONTAINER_KEY}'"
debug ""
debug "Variables:"
debug "CA_NAME                    = '${CA_NAME}'"
debug "CA_PATH                    = '${CA_PATH}'"
debug "CA_DB                      = '${CA_DB}'"
debug "CA_DB_ATTR                 = '${CA_DB_ATTR}'"
debug "CA_CRT_SRL                 = '${CA_CRT_SRL}'"
debug "CA_CRL_SRL                 = '${CA_CRL_SRL}'"
debug "CA_PASSWD_FILE             = '${CA_PASSWD_FILE}'"
debug "CA_KEY                     = '${CA_KEY}'"
debug "CA_KEY_SIZE                = '${CA_KEY_SIZE}'"
debug "CA_CSR                     = '${CA_CSR}'"
debug "CA_CERT                    = '${CA_CERT}'"
debug "CA_CRL                     = '${CA_CRL}'"
debug "CA_CONF                    = '${CA_CONF}'"
debug "CA_CERT_PEM                = '${CA_CERT_PEM}'"
debug "CA_CERT_DER                = '${CA_CERT_DER}'"
debug "CA_CHAIN                   = '${CA_CHAIN}'"
debug "CA_BASE_URL                = '${CA_BASE_URL}'"
debug "CA_COUNTRY                 = '${CA_COUNTRY}'"
debug "CA_STATE                   = '${CA_STATE}'"
debug "CA_ORGANIZATION_NAME       = '${CA_ORGANIZATION_NAME}'"
debug "CA_ORGANIZATION_SHORT_NAME = '${CA_ORGANIZATION_SHORT_NAME}'"
debug "CA_OCSP_URL                = '${CA_OCSP_URL}'"
debug "CA_ROOT_CN                 = '${CA_ROOT_CN}'"
debug "CA_INTERMEDIATE_CN         = '${CA_INTERMEDIATE_CN}'"
debug "CA_DEVICE_CN               = '${CA_DEVICE_CN}'"
debug "CA_IDENTIY_CN              = '${CA_IDENTITY_CN}'"
debug "CA_PUPPET_CN               = '${CA_PUPPET_CN}'"
debug "PARENT                     = '${PARENT}'"
debug "PARENT_CA_CONF             = '${PARENT_CA_CONF}'"
debug "PARENT_CA_PASSWD_FILE      = '${PARENT_CA_PASSWD_FILE}'"
debug "PARENT_CA_CHAIN            = '${PARENT_CA_CHAIN}'"

# Ensure the main directories exist
create_dir "${CA_TOOLS}/bin"
create_dir "${CA_TOOLS}/etc"
create_dir "${CA_TOOLS}/enc"
create_dir "${CA_TOOLS}/certs"
create_dir "${CA_TOOLS}/crl"
create_dir "${CA_TOOLS}/CA"
create_dir "${CA_PATH}"

# Debugging flag that will be passed to other called scripts
DEBUG_FLAG=""
if [ ${DEBUG} -eq 1 ]; then
    DEBUG_FLAG="-d"
fi

# Verbosity flag that will be passed to other called scripts
VERBOSE_FLAG=""
if [ ${VERBOSE} -eq 1 ]; then
    VERBOSFLAG="-v"
fi

# Create an encrypted container for the CA, if desired
if [ ${ENCRYPT} -eq 1 ]; then
    # Create the encrypted container
    if [ ! -f "${CONTAINER}" ] || [ ${FORCE} -eq 1 ]; then
        verbose "Creating the encrypted container"
        if [ ${USE_KEY_FILE} -eq 1 ]; then
            debug "executing: \"${CA_TOOLS}/bin/lukscreate\" -s \"${CONTAINER_SIZE}\" -c \"${CONTAINER}\" -k -f ${DEBUG_FLAG} ${VERBOSE_FLAG}"
            "${CA_TOOLS}/bin/lukscreate" -s "${CONTAINER_SIZE}" -c "${CONTAINER}" -k -f ${DEBUG_FLAG} ${VERBOSE_FLAG}
        else
            debug "executing: \"${CA_TOOLS}/bin/lukscreate\" -s \"${CONTAINER_SIZE}\" -c \"${CONTAINER}\" -f ${DEBUG_FLAG} ${VERBOSE_FLAG}"
            "${CA_TOOLS}/bin/lukscreate" -s "${CONTAINER_SIZE}" -c "${CONTAINER}" -f ${DEBUG_FLAG} ${VERBOSE_FLAG}
        fi
    fi

    # Mount the encrypted container
    verbose "Mounting the encrypted container"
    if [ ${USE_KEY_FILE} -eq 1 ]; then
        if [ ! -f "${CONTAINER_KEY}" ]; then
            fatal "Key file '${CONTAINER_KEY}' not found, exiting"
        else
            debug "executing: \"${CA_TOOLS}/bin/luksmount\" ${DEBUG_FLAG} ${VERBOSE_FLAG} -k \"${CONTAINER_KEY}\" \"${CONTAINER}\" \"${CA_PATH}\""
            "${CA_TOOLS}/bin/luksmount" ${DEBUG_FLAG} ${VERBOSE_FLAG} -k "${CONTAINER_KEY}" "${CONTAINER}" "${CA_PATH}"
        fi
    else
        debug "executing: \"${CA_TOOLS}/bin/luksmount\" ${DEBUG_FLAG} ${VERBOSE_FLAG} \"${CONTAINER}\" \"${CA_PATH}\""
        "${CA_TOOLS}/bin/luksmount" ${DEBUG_FLAG} ${VERBOSE_FLAG} "${CONTAINER}" "${CA_PATH}"
    fi

    # Validate that we're mounted
    if [ ! -d "${CA_PATH}/lost+found" ]; then
        fatal "Unable to mount the encrypted container"
    fi
fi

# Create the root CA directory structure inside of the encrypted container
create_dir "${CA_PATH}/private"
create_dir "${CA_PATH}/db"
create_dir "${CA_PATH}/csr"
create_dir "${CA_PATH}/certs"

# Initialize the database and serial number files
init_empty_file "${CA_DB}"
init_empty_file "${CA_DB_ATTR}"
init_index_file "${CA_CRT_SRL}"
init_index_file "${CA_CRL_SRL}"

# Generate a password for the CA's key
if [ ! -f "${CA_PASSWD_FILE}" ] || [ ${FORCE} -eq 1 ]; then
    verbose "Creating ${CA_PASSWD_FILE}"
    debug "executing: \"${CA_TOOLS}/bin/genpasswd\" -l ${PWLEN} -r ${PWROUNDS} > \"${CA_PASSWD_FILE}\""
    "${CA_TOOLS}/bin/genpasswd" -l ${PWLEN} -r ${PWROUNDS} > "${CA_PASSWD_FILE}"
fi

# Create the CA key
if [ ! -f "${CA_KEY}" ] || [ ${FORCE} -eq 1 ]; then
    verbose "Creating ${CA_KEY}"
    debug "executing: openssl genrsa -aes256 -passout \"file:${CA_PASSWD_FILE}\" -out \"${CA_KEY}\" \"${CA_KEY_SIZE}\""
    openssl genrsa -aes256                \
        -passout "file:${CA_PASSWD_FILE}" \
        -out     "${CA_KEY}" "${CA_KEY_SIZE}"
fi

# Create the CA certificate signing request
if [ ! -f "${CA_CSR}" ] || [ ${FORCE} -eq 1 ]; then
    verbose "Creating ${CA_CSR}"
    set | grep CA_BASE_URL
    debug "executing: openssl req -new -verbose -config \"${CA_CONF}\" -out \"${CA_CSR}\" -key \"${CA_KEY}\" -passin \"file:${CA_PASSWD_FILE}\""
    openssl req -new -verbose   \
        -config "${CA_CONF}"    \
        -out    "${CA_CSR}"     \
        -key    "${CA_KEY}"     \
        -passin "file:${CA_PASSWD_FILE}"
fi

# Sign the CA certificate
if [ ! -f "${CA_CERT}" ] || [ ${FORCE} -eq 1 ]; then
    SELF_SIGN="-selfsign"
    SIGNING_CA_CONF="${CA_CONF}"
    SIGNING_CA_PASSWD_FILE="${CA_PASSWD_FILE}"

    # If we have a parent CA then we need to change
    # the configuration and password files too.
    if [ "${PARENT}" != "" ]; then
        SELF_SIGN=""
        SIGNING_CA_CONF="${PARENT_CA_CONF}"
        SIGNING_CA_PASSWD_FILE="${PARENT_CA_PASSWD_FILE}"
    fi

    verbose "Creating ${CA_CERT}"
    debug "executing: openssl ca ${SELF_SIGN} -verbose -batch -config \"${SIGNING_CA_CONF}\" -in \"${CA_CSR}\" -out \"${CA_CERT}\" -extensions \"${CA_NAME}_ca_ext\" -passin \"file:${SIGNING_CA_PASSWD_FILE}\""
    openssl ca ${SELF_SIGN}             \
        -verbose                        \
        -batch                          \
        -config "${SIGNING_CA_CONF}"    \
        -in     "${CA_CSR}"             \
        -out    "${CA_CERT}"            \
        -extensions "${CA_NAME}_ca_ext" \
        -passin     "file:${SIGNING_CA_PASSWD_FILE}"
fi

# Create the initial CRL
if [ ! -f "${CA_CRL}" ] || [ ${FORCE} -eq 1 ]; then
    verbose "Creating ${CA_CRL}"
    debug "executing: openssl ca -gencrl -config \"${CA_CONF}\" -out \"${CA_CRL}\" -passin \"file:${CA_PASSWD_FILE}\""
    openssl ca -gencrl       \
        -config "${CA_CONF}" \
        -out    "${CA_CRL}"  \
        -passin "file:${CA_PASSWD_FILE}"
fi

# Copy the CA certificate to the main certificate directory
if [ ! -f "${CA_CERT_PEM}" ] || [ ${FORCE} -eq 1 ]; then
    verbose "Creating ${CA_CERT_PEM}"
    debug "executing: openssl x509 -in \"${CA_CERT}\" -out \"${CA_CERT_PEM}\" -outform PEM"
    openssl x509 -in "${CA_CERT}" -out "${CA_CERT_PEM}" -outform PEM
fi

# Create a DER copy of the certificate
if [ ! -f "${CA_CERT_DER}" ] || [ ${FORCE} -eq 1 ]; then
    verbose "Creating ${CA_CERT_DER}"
    debug "executing: openssl x509 -in \"${CA_CERT_PEM}\" -inform PEM -out \"${CA_CERT_DER}\" -outform DER"
    openssl x509                            \
        -in  "${CA_CERT_PEM}" -inform  PEM  \
        -out "${CA_CERT_DER}" -outform DER
fi

# Create the CA chain
if [ "${PARENT}" != "" ]; then
    if [ ! -f "${CA_CHAIN}" ] || [ ${FORCE} -eq 1 ]; then
        verbose "Creating ${CA_CHAIN}"
        debug "executing: cat \"${CA_CERT_PEM}\" \"${PARENT_CA_CHAIN}\" > \"${CA_CHAIN}\""
        cat "${CA_CERT_PEM}" "${PARENT_CA_CHAIN}" > "${CA_CHAIN}"
    fi
fi

# GPG Sign the CA public certificate
GPG_HOME="${CA_TOOLS}/.gnupg"
GPG_PASS="${GPG_HOME}/ca-gpg-key.pw"
if [ -f "${GPG_PASS}" ]; then
    # Sign the DER formatted certificate
    if [ ! -f "${CA_CERT_DER}.asc" ] || [ ${FORCE} -eq 1 ]; then
        verbose "GPG signing ${CA_CERT_DER}"
        debug "executing: cat "${GPG_PASS}" | gpg --homedir \"${GPG_HOME}\" --passphrase-fd 0 --batch --armor --detach-sign \"${CA_CERT_DER}\""
        cat "${GPG_PASS}" | gpg --homedir "${GPG_HOME}" --passphrase-fd 0 --batch --armor --detach-sign "${CA_CERT_DER}"
    fi

    # Sign the PEM formatted certificate
    if [ ! -f "${CA_CERT_PEM}.asc" ] || [ ${FORCE} -eq 1 ]; then
        verbose "GPG signing ${CA_CERT_PEM}"
        debug "executing: cat "${GPG_PASS}" | gpg --homedir \"${GPG_HOME}\" --passphrase-fd 0 --batch --armor --detach-sign \"${CA_CERT_PEM}\""
        cat "${GPG_PASS}" | gpg --homedir "${GPG_HOME}" --passphrase-fd 0 --batch --armor --detach-sign "${CA_CERT_PEM}"
    fi
fi
